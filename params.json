{"name":"Android-stripe-connect","tagline":"Android Library for integrating Stripe using Stripe Connect Oauth","body":"android-stripe-connect\r\n======================\r\n\r\nAndroid Library for integrating with Stripe using [Stripe Connect Oauth](https://stripe.com/docs/connect/reference).\r\n\r\n<center>\r\n![Stripe Connect](http://i.imgur.com/vnoicS1.png \"Stripe Connect\")\r\n![Stripe Connect](http://i.imgur.com/oyW4Phj.png \"Stripe Connect\")\r\n</center>\r\n\r\n## Usage\r\n\r\nYou can add the Stripe Connect button to your layout using the following XML code:\r\n\r\n\r\n```XML\r\n\t<com.github.thiagolocatelli.stripe.StripeButton\r\n\t\tandroid:id=\"@+id/btnStripeConnect\"\r\n\t\tandroid:layout_height=\"wrap_content\"\r\n\t\tandroid:layout_width=\"200dip\" \r\n\t\tandroid:layout_gravity=\"center_horizontal\"\r\n\t\tandroid:layout_marginTop=\"20dip\"/>\r\n```\r\n\r\nYou can create an utility class where you can define your application credentials, like the one below (This is obvilously insecure, make sure you keep all this information stored in a way its impossible to decompile):\r\n\r\n```Java\r\npublic class ApplicationData {\r\n\tpublic static final String CLIENT_ID = \"\";\r\n\tpublic static final String CLIENT_SECRET = \"\";\r\n\tpublic static final String CALLBACK_URL = \"\";\r\n}\r\n```\r\n\r\nInside your Activity, you can manipulate the button and change its properties. You can either launch a Dialog to start the authentication or start a Activity.\r\n\r\n```Java\r\nStripeAppmApp = new StripeApp(this, ApplicationData.CLIENT_ID, \r\n\t\t\t\tApplicationData.SECRET_KEY, ApplicationData.CALLBACK_URL);\r\n\r\nmStripeButton = (StripeButton) findViewById(R.id.btnStripeConnect);\r\n\t\tmStripeButton.setStripeApp(mApp);\r\n\t\tmStripeButton.addStripeConnectListener(new StripeConnectListener() {\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onConnected() {\r\n\t\t\t\ttvSummary.setText(\"Connected as \" + mApp.getAccessToken());\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onDisconnected() {\r\n\t\t\t\ttvSummary.setText(\"Disconnected\");\r\n\t\t\t}\r\n\r\n\t\t\t@Override\r\n\t\t\tpublic void onError(String error) {\r\n\t\t\t\tToast.makeText(MainActivity.this, error, Toast.LENGTH_SHORT).show();\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n```\r\n\r\nBy default, when the Stripe Connect button is clicked, an Android Dialog will open and display the Stripe authentication page. If you would like to open an Activity instead of a Dialog, you can use **setConnectMode** to change such behavior.\r\n\r\n```Java\r\nmStripeButton = (StripeButton) findViewById(R.id.btnStripeConnect);\r\nmStripeButton.setStripeApp(mApp);\r\nmStripeButton.setConnectMode(CONNECT_MODE.ACTIVITY);\r\n```\r\nYou also need to add to your AndroidManifest.xml the following line, which will allow the Stripe Connect button to start the authentication Activity.\r\n\r\n```XML\r\n<activity android:name=\"com.github.thiagolocatelli.stripe.StripeActivity\"  />\r\n```\r\n\r\nOnce the authentication is finished, you can use the helper methods from the object StripeApp to get the data you need, like the oauth access token required to make calls using the [Stripe Java library](https://github.com/stripe/stripe-java).\r\n\r\n```JAVA\r\nStripe.apiKey = mApp.getAccessToken();\r\n```\r\n\r\nDownload the sample application and git it a try.\r\n\r\n## Contact\r\n\r\nIf you have any questions, please drop me a line: \"thiago:locatelli$gmail:com\".replace(':','.').replace('$','@')\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}